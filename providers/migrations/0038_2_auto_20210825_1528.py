# Generated by Django 3.2.4 on 2021-08-25 15:28

import django.core.validators
from django.db import migrations, models


def merge_price_into_single_field(apps, schema_editor):
    Service = apps.get_model("providers", "Service")

    for service in Service.objects.all():
        daily_price = service.full_day_price
        hourly_price = service.hourly_price

        if hourly_price is None and daily_price is None:
            service.price_value = None
            service.price_type = None

        elif hourly_price is None and daily_price is not None:
            if daily_price == 0:
                service.price_type = 'FREE'
                service.price_value = 0
            elif daily_price > 0:
                service.price_value = hourly_price
                service.price_type = 'HOURLY'
            elif daily_price < 0:
                service.price_value = None
                service.price_type = None
                print(
                    f"{{service.provider}} had a negative daily price ({{service.daily_price}})"
                )

            else:
                raise Exception(
                    f"Migration of {service.provider.name} (prov_id: {service.provider.pk}) with serv_id {service.id} failed (daily: {daily_price}, hourly: {hourly_price})"
                )

        elif hourly_price is not None and daily_price is None:
            if hourly_price == 0:
                service.price_type = 'FREE'
                service.price_value = 0
            elif hourly_price > 0:
                service.price_value = hourly_price
                service.price_type = 'HOURLY'
            elif hourly_price < 0:
                service.price_value = None
                service.price_type = None
                print(
                    f"{{service.provider}} had a negative hourly price ({{service.hourly_price}})"
                )
            else:
                raise Exception(
                    f"Migration of {service.provider.name} (prov_id: {service.provider.pk}) with serv_id {service.id} failed (daily: {daily_price}, hourly: {hourly_price})"
                )

        elif hourly_price is not None and daily_price is not None:
            if hourly_price == 0 and daily_price == 0:
                service.price_type = 'FREE'
                service.price_value = 0
            elif hourly_price > 0 and daily_price == 0:
                service.price_type = None
                service.price_value = None
                print(
                    f"Migration of {str(service)} with id {service.id} had a pricing that didn't make sense (hourly price positive but daily 0)"
                )
            elif hourly_price == 0 and daily_price > 0:
                service.price_type = None
                service.price_value = None
                print(
                    f"Migration of {service} with id {service.id} had a pricing that didn't make sense (daily price positive bot daily 0)"
                )
            elif hourly_price > 0 and daily_price > 0:
                service.price_type = None
                service.price_value = None
                print(
                    f"Migration of {service} with id {service.id} had a pricing that didn't make sense (both daily and hourly not 0)"
                )
            else:
                raise Exception(
                    f"Migration of {service.provider.name} (prov_id: {service.provider.pk}) with serv_id {service.id} failed (daily: {daily_price}, hourly: {hourly_price})"
                )

        service.save()


class Migration(migrations.Migration):

    dependencies = [
        ('providers', '0038_1_auto_20210825_1528'),
    ]

    operations = [
        migrations.RunPython(merge_price_into_single_field),
    ]
